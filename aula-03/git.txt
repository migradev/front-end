O Git é um sistema de controle de versão. Desenvolvedores usam sistemas desse tipo 
para compartilhar código e gerenciar as versões dele. O Git é diferente do GitHub, o 
GitHub é onde o código fonte ficar armazendo na nuvem, como uma espécie de Google Drive, 
o Git é o sistema que o GitHub e o desenvolvedor na sua maquina usam para gerenciar o codigo.

O valor do Git para desevolvimento de software é poder ter um historico de mudanças e reverter as mesmas
quando necessário, seja apenas um mudança ou um pacote delas, que geralmente seria uma versão. Desevolvimento 
de software trabalha com versões, e a cada nova versão podem ocorrer erros, e muitas vezes as versões antigas 
continuam sendo usadas por usuários e os desenvolvedores precisam prestar suporte para ela, o Git ajuda 
a gerenciar tudo isso.

Para usar o Git você precisa instalar ele na sua maquina: https://git-scm.com/downloads

O Git trata os projetos como repositórios, que basicamente seria uma pasta onde você pode colocar seus arquivos (qualquer tipo), 
o conteudo da aula que você baixou (https://github.com/migradev/front-end) é um repositório. Com o git instalado, para criar 
um repositório basta acessar uma pasta via terminal (Prompt de comando) e executar o comando init:


1 - cd <caminho da pasta>                                                                                                                         
2 - git init


Agora a pasta se tornou um repositório, mas ele ainda não esta conectado a repositório no GitHub, ele está apenas na sua maquina,
para isso você precisa adicionar a url do repositório remoto (o repositório na nuvem), da seguinte forma:


git remote add <nome do repositório remoto> <url>


Nesse caso o nome será "origin", que é o nome padrão para adicionar o repositório remoto principal


git remote add origin <url>


Com isso o seu repositório local e o remoto estão conectados, agora basta fazer uma mudança e 
fazer o upload dela para remoto. No Git uma mudança se chama commit, um commit pode ter mudanças em varios arquivos, 
será gerado automaticamente um id para ele, e é obrigatório que ele tenha uma mensagem descrevendo a mudança, que você deve escrever.

Após mudar os arquivos desejados você adiciona-los para o proximo commmit:


git add <caminho do arquivo>


Geralmente queremos adicionar todos os arquivos ao mesmo tempo, então um jeito mais facil seria passar apenas um "." no 
lugar do caminho exato, dessa forma ele vai adicionar todos os arquivos da pasta que o seu terminal está acessando no momento, 
se você estiver na pasta raiz do repositório ele vai adicionar todas as suas mudanças:


git add .


Com as mudanças adicionadas você pode fazer o commit:


git commit -m "descrição da mudança"


Sempre descreva a mudança em si, o que ela muda no projeto e não o que você teve que fazer, descreva de forma que alguem 
consiga entender sem precisar saber todo o histórico, mas ao mesmo de forma resumida, por exemplo:

Errado: Mudei o arquivo compra.html para consertar o erro do botão 
Errado: Consertando o erro do botão da home 
Correto: Consertando o erro do botão 'Saiba mais' da home que não aparecia quando o usuário não estava logado

Com esse commit pronto você pode fazer mais commits ou mandar o que você tem para o repositório remoto, 
da seguinte forma:


git push








